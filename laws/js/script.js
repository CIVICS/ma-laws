// Generated by CoffeeScript 1.6.3
(function() {
  var Routes, View, body, db, routes, start, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  db = false;

  View = (function(_super) {
    __extends(View, _super);

    function View() {
      _ref = View.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    View.prototype.initialize = function() {
      this.render = this.options.render;
      this.template = Mustache.compile(this.options.template);
      this.routes = this.options.routes;
      return true;
    };

    View.prototype.events = {
      'click .bodyLink': 'movePage'
    };

    View.prototype.movePage = function(a) {
      a.preventDefault();
      return routes.navigate(a.target.id, {
        trigger: true
      });
    };

    return View;

  })(Backbone.View);

  body = new View({
    render: function(loc) {
      var id, opts, type;
      if (loc.section !== 'all') {
        id = "" + loc.type + "/Part" + loc.part + "/Title" + loc.title + "/Chapter" + loc.chapter + "/Section" + loc.section;
        return db.get(id, function(err, doc) {
          if (err) {

          } else {
            return body.$el.html(body.template(doc));
          }
        });
      } else if (loc.section === 'all' && loc.chapter !== 'all') {
        if (loc.type = 'GeneralLaws') {
          type = 'general';
        } else {
          type = loc.type;
        }
        opts = {
          startkey: [type, loc.part, loc.title, loc.chapter.toString()],
          endkey: [type, loc.part, loc.title, loc.chapter.toString(), {}],
          reduce: false,
          include_docs: true
        };
        return db.query("laws/all", opts, function(err, resp) {
          resp.chap = loc.chapter;
          return body.$el.html(body.template(resp));
        });
      } else if (loc.chapter === 'all' && loc.title !== 'all') {
        if (loc.type = 'GeneralLaws') {
          type = 'general';
        } else {
          type = loc.type;
        }
        opts = {
          startkey: [type, loc.part, loc.title],
          endkey: [type, loc.part, loc.title, {}],
          group_level: 4
        };
        return db.query("laws/all", opts, function(err, resp) {
          var rows;
          rows = resp.rows.map(function(row) {
            var out;
            out = {};
            out.chapter = row.key.pop();
            out.title = row.key.pop();
            out.part = row.key.pop();
            return out;
          });
          return body.$el.html(body.template({
            row: rows,
            t: loc.title
          }));
        });
      } else if (loc.title === 'all' && loc.part !== 'all') {
        if (loc.type = 'GeneralLaws') {
          type = 'general';
        } else {
          type = loc.type;
        }
        opts = {
          startkey: [type, loc.part],
          endkey: [type, loc.part, {}],
          group_level: 3
        };
        return db.query("laws/all", opts, function(err, resp) {
          var rows;
          rows = resp.rows.map(function(row) {
            var out;
            out = {};
            out.title = row.key.pop();
            out.part = row.key.pop();
            return out;
          });
          return body.$el.html(body.template({
            rowp: rows,
            p: loc.part
          }));
        });
      } else {
        type = 'general';
        opts = {
          startkey: [type],
          endkey: [type, {}],
          group_level: 2
        };
        return db.query("laws/all", opts, function(err, resp) {
          var rows;
          rows = resp.rows.map(function(row) {
            var out;
            out = {};
            out.part = row.key.pop();
            return out;
          });
          return body.$el.html(body.template({
            rowg: rows,
            g: true
          }));
        });
      }
    },
    template: "<div class=\"row\">\n{{#desc}}<h1>{{desc}}</h1>{{/desc}}\n{{#text}}<p>{{text}}</p>{{/text}}\n{{#chap}}\n<h1>Chapter {{chap}}</h1>\n<dl>{{/chap}}\n{{#rows}}\n{{#doc.desc}}<dt><a class='bodyLink' href='Chapter{{doc.chapter}}/Section{{doc.section}}' id='GeneralLaws/Part{{doc.part}}/Title{{doc.title}}/Chapter{{doc.chapter}}/Section{{doc.section}}'>{{doc.desc}}</a></dt>{{/doc.desc}}\n{{#doc.text}}<dd>{{doc.text}}</dd>{{/doc.text}}\n{{/rows}}\n{{#chap}}</dl>{{/chap}}\n{{#t}}\n<h1>title {{t}}</h1>\n<ul>{{/t}}\n{{#row}}\n	<li>\n	<a class='bodyLink' href='Title{{title}}/Chapter{{chapter}}' id=\"GeneralLaws/Part{{part}}/Title{{title}}/Chapter{{chapter}}\">\n		Chapter {{chapter}}\n	</a>\n	</li>\n{{/row}}\n{{#t}}</ul>{{/t}}\n{{#p}}\n<h1>Part {{p}}</h1>\n<ul>{{/p}}\n{{#rowp}}\n	<li>\n	<a class='bodyLink' href='Part{{part}}/Title{{title}}' id=\"GeneralLaws/Part{{part}}/Title{{title}}\">\n		Title {{title}}\n	</a>\n	</li>\n{{/rowp}}\n{{#p}}</ul>{{/p}}\n{{#g}}\n<h1>General Laws</h1>\n<ul>{{/g}}\n{{#rowg}}\n	<li>\n	<a class='bodyLink' href='GeneralLaws/Part{{part}}' id=\"GeneralLaws/Part{{part}}\">\n		Part {{part}}\n	</a>\n	</li>\n{{/rowg}}\n{{#g}}</ul>{{/g}}\n</div>",
    el: $('#mainContent')
  });

  window.body = body;

  Routes = (function(_super) {
    __extends(Routes, _super);

    function Routes() {
      _ref1 = Routes.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Routes.prototype.routes = {
      ':type': 'roo',
      ':type/Part:part': 'roo',
      ':type/Part:part/Title:title': 'roo',
      ':type/Part:part/Title:title/Chapter:chapter': 'roo',
      ':type/Part:part/Title:title/Chapter:chapter/Section:section': 'roo',
      '*spat': 'roo'
    };

    Routes.prototype.roo = function(type, part, title, chapter, section) {
      var parts;
      if (type == null) {
        type = 'home';
      }
      if (part == null) {
        part = 'all';
      }
      if (title == null) {
        title = 'all';
      }
      if (chapter == null) {
        chapter = 'all';
      }
      if (section == null) {
        section = 'all';
      }
      parts = {
        type: type,
        part: part,
        title: title,
        chapter: chapter,
        section: section
      };
      if (parts.chapter !== 'all') {
        parts.chapter = parseInt(parts.chapter, 10);
      }
      if (parts.section !== 'all') {
        parts.section = parseInt(parts.section, 10);
      }
      return body.render(parts);
    };

    return Routes;

  })(Backbone.Router);

  routes = new Routes;

  /*nav = new View
  	render:(location)->
  		true
  	template:"""
  		<ul>
  		{{#items}}
  		
  		{{/items}}
  		</ul>
  	"""
  	el:$ '#navBar'
  */


  start = function(base, dbname) {
    return db = Pouch("" + base + "/" + dbname, function(err, rslt) {
      Backbone.history.start({
        pushState: true,
        root: "" + dbname + "/_design/laws/_rewrite/",
        hashChange: false
      });
      return window.db = db;
    });
  };

  start('https://kublai.cloudant.com', 'law');

}).call(this);

/*
//@ sourceMappingURL=script.map
*/
